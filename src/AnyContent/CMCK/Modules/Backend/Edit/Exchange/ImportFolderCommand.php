<?php

namespace AnyContent\CMCK\Modules\Backend\Edit\Exchange;

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;

use Symfony\Component\Console\Output\OutputInterface;

use AnyContent\CMCK\Modules\Backend\Core\Repositories\RepositoryManager;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;

class ImportFolderCommand extends \AnyContent\CMCK\Modules\Backend\Core\Application\Command
{

    protected function configure()
    {
        $this->setName('cmck:importfolder')
             ->setDescription('Import complete repositories containing JSON/Excel files generated by cmck:export command.')
             ->addArgument('folder', InputArgument::REQUIRED,
                 'Folder containing JSON/Excel files directly or repository folders.');

    }


    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $app = $this->getSilexApplication();
        /** @var RepositoryManager $repositoryManager */
        $repositoryManager = $app['repos'];

        $importer = new Importer();
        $importer->setOutput($output);

        $output->writeln('');

        $folder = $input->getArgument('folder');

        if (strpos($folder, '/') !== 0) {
            $folder = getcwd() . '/' . $folder;
        }
        $folder = realpath($folder);

        if (!is_dir($folder)) {
            $output->writeln(self::escapeError . 'Could not acesss directory' . self::escapeReset);

            return;

        }

        $finder = new Finder();

        $finder->in($folder)->files()->name('*.json')->name('*.xlsx');

        /* @var SplFileInfo $file */
        foreach ($finder as $file) {
            $output->writeln('Processing ' . $file->getFilename());

            $repositoryName = basename($file->getPath());

            $repository = $repositoryManager->getRepositoryById($repositoryName);

            if (!$repository) {
                $output->writeln(self::escapeError . 'Could not acesss repository ' . $repositoryName . self::escapeReset);
                continue;
            }

            $split = explode('.', $file->getFilename());

            if (count($split) != 4) {
                $output->writeln(self::escapeError . 'Cannot extract content type, workspace and language doubtless from file name.' . self::escapeReset);
                continue;
            }

            $contentTypeName = $split[0];
            $workspace       = $split[1];
            $language        = $split[2];
            $suffix          = $split[3];

            $output->writeln('Starting import for content type ' . $contentTypeName);

            if (!$repository->hasContentType($contentTypeName)) {
                $output->writeln(self::escapeError . 'Repository ' . $repositoryName . ' does not have a content type named ' . $contentTypeName . '. Use the list command to show available content types.' . self::escapeReset);

                continue;
            }

            $definition = $repository->getContentTypeDefinition($contentTypeName);

            //                    if (!$definition->hasWorkspace($workspace)) {
//                        $output->writeln(
//                            self::escapeError.'Content type '.$contentTypeName.' does not have a workspace named '.$workspace.self::escapeReset
//                        );
//                        continue;
//                    }

            //                        if (!$repository->getContentTypeDefinition($contentTypeName)->hasLanguage($language)) {
//                            $output->writeln(
//                                self::escapeError.'Content type '.$contentTypeName.' does not have a language named '.$language.self::escapeReset
//                            );
//                            continue;
//                        }

            switch ($suffix) {
                case 'xlsx':
                    $importer->importXLSX($repository, $contentTypeName, $file->getPathname(), $workspace, $language);
                    break;
                case 'json':
                    $data = $file->getContents();
                    $importer->importJSON($repository, $contentTypeName, $data, $workspace, $language);
                    break;
            }

        }

        return;

    }
}
